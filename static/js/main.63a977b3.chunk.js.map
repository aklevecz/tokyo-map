{"version":3,"sources":["components/MapFunctions.js","Context.js","components/Map.js","components/ReturnToMap.js","components/Theater.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["window","THREE","reducer","state","action","place","file","extension","type","Object","objectSpread","view","initialState","MapContext","createContext","MapProvider","props","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","react_default","a","createElement","Provider","value","children","Map","useContext","useEffect","map","mapboxgl","container","style","center","zoom","pitch","bearing","id","on","addLayer","source","source-layer","filter","minzoom","paint","fill-extrusion-color","fill-extrusion-height","data","Uint8Array","width","x","y","offset","fts","lonlat","keys","coords","forEach","o","lon","lat","obj","properties","geometry","coordinates","push","console","log","addImage","height","features","layout","icon-image","e","flyTo","_e$features$0$propert","remove","backgroundColor","onClick","document","getElementById","display","ButtonOverlay","styled","div","_templateObject","ReturnToMap","Theater","camera","scene","renderer","controls","video","myReq","mesh","PerspectiveCamera","innerWidth","innerHeight","position","z","Scene","geo","SphereBufferGeometry","scale","texture","gcpURL","concat","crossOrigin","loop","src","setAttribute","play","VideoTexture","minFilter","LinearFilter","magFilter","format","RGBEFormat","mapping","SphericalReflectionMapping","TextureLoader","load","material","MeshBasicMaterial","Mesh","add","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","OrbitControls","domElement","appendChild","init","animate","requestAnimationFrame","render","update","cancelAnimationFrame","react","ReturnToMap_ReturnToMap","Router","Map_Map","Theater_Theater","App","Router_Router","Boolean","location","hostname","match","ReactDOM","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63a977b3.chunk.js","sourcesContent":["import * as mapboxgl from \"mapbox-gl\";\r\n//import * as THREE from \"three\";\r\nconst THREE = window.THREE;\r\nexport const makeMap = () => {\r\n  mapboxgl.accessToken =\r\n    \"pk.eyJ1IjoidGVoLXJhcHRvciIsImEiOiJjamdmZDExMTYyaXVnMnhxZTN6ZDNncmxnIn0.PZyUBVM9BCLM65ozSvBb1A\";\r\n\r\n  const map = new mapboxgl.Map({\r\n    container: \"map\",\r\n    style: \"mapbox://styles/teh-raptor/cjgff1y62000e2rq7wm80q9xa\",\r\n    center: [135.772179, 35.035178],\r\n    zoom: 15,\r\n    pitch: 45,\r\n    bearing: -17.6,\r\n    id: \"crab\"\r\n  });\r\n\r\n  return map;\r\n};\r\n\r\n// converts from WGS84 Longitude, Latitude into a unit vector anchor at the top left as needed for GL JS custom layers\r\nexport const fromLL = function(lon, lat) {\r\n  // derived from https://gist.github.com/springmeyer/871897\r\n  const extent = 20037508.34;\r\n\r\n  const x = (lon * extent) / 180;\r\n  let y = Math.log(Math.tan(((90 + lat) * Math.PI) / 360)) / (Math.PI / 180);\r\n  y = (y * extent) / 180;\r\n\r\n  return [(x + extent) / (2 * extent), 1 - (y + extent) / (2 * extent)];\r\n};\r\n\r\nexport const transformFromLL = (lon, lat) => {\r\n  const translation = fromLL(lon, lat);\r\n  const transform = {\r\n    translateX: translation[0],\r\n    translateY: translation[1],\r\n    translateZ: 0,\r\n    rotateX: Math.PI / 2,\r\n    rotateY: 0,\r\n    rotateZ: 0,\r\n    scale: 1.41843220338983e-8\r\n  };\r\n  return transform;\r\n};\r\n\r\nexport const threeDModel = (transform, id) => ({\r\n  id,\r\n  type: \"custom\",\r\n  renderingMode: \"3d\",\r\n  onAdd: function(map, gl) {\r\n    this.camera = new THREE.Camera();\r\n    this.scene = new THREE.Scene();\r\n\r\n    const directionalLight = new THREE.DirectionalLight(0xffffff);\r\n    directionalLight.position.set(0, -70, 100).normalize();\r\n    this.scene.add(directionalLight);\r\n\r\n    const directionalLight2 = new THREE.DirectionalLight(0xffffff);\r\n    directionalLight2.position.set(0, 70, 100).normalize();\r\n    this.scene.add(directionalLight2);\r\n\r\n    const geometry = new THREE.SphereGeometry(50, 32, 32);\r\n    const material = new THREE.MeshBasicMaterial({\r\n      color: \"#\" + Math.floor(Math.random() * 16777215).toString(16),\r\n      transparent: true,\r\n      opacity: 0.7\r\n    });\r\n    this.sphere = new THREE.Mesh(geometry, material);\r\n    this.scene.add(this.sphere);\r\n    this.map = map;\r\n\r\n    this.renderer = new THREE.WebGLRenderer({\r\n      canvas: map.getCanvas(),\r\n      context: gl\r\n    });\r\n\r\n    this.renderer.autoClear = false;\r\n  },\r\n  render: function(gl, matrix) {\r\n    // const rotationX = new THREE.Matrix4().makeRotationAxis(new THREE.Vector3(1, 0, 0), transform.rotateX);\r\n    // const rotationY = new THREE.Matrix4().makeRotationAxis(new THREE.Vector3(0, 1, 0), transform.rotateY);\r\n    // const rotationZ = new THREE.Matrix4().makeRotationAxis(new THREE.Vector3(0, 0, 1), transform.rotateZ);\r\n\r\n    const m = new THREE.Matrix4().fromArray(matrix);\r\n    const l = new THREE.Matrix4()\r\n      .makeTranslation(\r\n        transform.translateX,\r\n        transform.translateY,\r\n        transform.translateZ\r\n      )\r\n      .scale(\r\n        new THREE.Vector3(transform.scale, -transform.scale, transform.scale)\r\n      );\r\n    // this.sphere.scale.y += Math.sin(Date.now() * Math.random());\r\n    // this.sphere.scale.x += Math.sin(Date.now() * Math.random());\r\n    // .multiply(rotationX)\r\n    // .multiply(rotationY)\r\n    // .multiply(rotationZ);\r\n\r\n    this.camera.projectionMatrix.elements = matrix;\r\n    this.camera.projectionMatrix = m.multiply(l);\r\n    this.renderer.state.reset();\r\n    this.renderer.render(this.scene, this.camera);\r\n    this.map.triggerRepaint();\r\n  }\r\n});\r\n","import React, { useReducer, createContext } from \"react\";\r\n\r\nlet reducer = (state, action) => {\r\n  const { place, file, extension } = action;\r\n  switch (action.type) {\r\n    case \"map\":\r\n      return { ...state, view: \"map\" };\r\n    case \"theater\":\r\n      return { ...state, view: \"theater\", place, file, extension };\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nconst initialState = { view: \"map\", place: \"\", file: \"\", extension: \"\" };\r\nconst MapContext = createContext(initialState);\r\n\r\nfunction MapProvider(props) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <MapContext.Provider value={{ state, dispatch }}>\r\n      {props.children}\r\n    </MapContext.Provider>\r\n  );\r\n}\r\n\r\nexport { MapContext, MapProvider };\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { makeMap, transformFromLL, threeDModel } from \"./MapFunctions\";\r\nimport coords from \"./result.json\";\r\nimport { MapContext } from \"../Context\";\r\nexport const Map = () => {\r\n  const { dispatch } = useContext(MapContext);\r\n  useEffect(() => {\r\n    // Load the mapbox map\r\n    const map = makeMap();\r\n\r\n    // const transform = transformFromLL(139.7800295, 35.6476516);\r\n    // const transform2 = transformFromLL(139.7810295, 35.6476516);\r\n    // const threeJSModel = threeDModel(transform, \"model1\");\r\n    // const threeJSModel2 = threeDModel(transform2, \"model2\");\r\n\r\n    // const models = [];\r\n    // for (let i = 0; i < 10; i++) {\r\n    //   models.push(threeDModel(transform, \"m\" + i));\r\n    // }\r\n\r\n    map.on(\"style.load\", function() {\r\n      map.addLayer({\r\n        id: \"3d-buildings\",\r\n        source: \"composite\",\r\n        \"source-layer\": \"building\",\r\n        filter: [\"==\", \"extrude\", \"true\"],\r\n        type: \"fill-extrusion\",\r\n        minzoom: 15,\r\n        paint: {\r\n          \"fill-extrusion-color\": \"#ccc\",\r\n          \"fill-extrusion-height\": [\"get\", \"height\"]\r\n        }\r\n      });\r\n\r\n      var width = 64; // The image will be 64 pixels square\r\n      var bytesPerPixel = 4; // Each pixel is represented by 4 bytes: red, green, blue, and alpha.\r\n      var data = new Uint8Array(width * width * bytesPerPixel);\r\n\r\n      for (var x = 0; x < width; x++) {\r\n        for (var y = 0; y < width; y++) {\r\n          var offset = (y * width + x) * bytesPerPixel;\r\n          data[offset + 0] = (y / width) * 255; // red\r\n          data[offset + 1] = (x / width) * 255; // green\r\n          data[offset + 2] = 128; // blue\r\n          data[offset + 3] = 255; // alpha\r\n        }\r\n      }\r\n\r\n      let fts = [];\r\n      let lonlat = [];\r\n      const places = Object.keys(coords);\r\n      places.forEach(place => {\r\n        coords[place].forEach(o => {\r\n          const { file, extension, lon, lat } = o;\r\n          const obj = {\r\n            type: \"Feature\",\r\n            properties: {\r\n              place,\r\n              file,\r\n              extension\r\n            },\r\n            geometry: {\r\n              type: \"Point\",\r\n              coordinates: [lon, lat]\r\n            }\r\n          };\r\n          fts.push(obj);\r\n          lonlat.push([lon, lat]);\r\n        });\r\n      });\r\n\r\n      console.log(fts);\r\n\r\n      map.addImage(\"gradient\", { width: width, height: width, data: data });\r\n      map.addLayer({\r\n        id: \"points\",\r\n        type: \"symbol\",\r\n        source: {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"FeatureCollection\",\r\n            features: fts\r\n            // features: [\r\n            //   {\r\n            //     type: \"Feature\",\r\n            //     properties: {\r\n            //       place: \"kyoto-botanical\",\r\n            //       file: \"kyoto-botanical-god_tree1-2000\",\r\n            //       extension: \"mp4\"\r\n            //     },\r\n            //     geometry: {\r\n            //       type: \"Point\",\r\n            //       coordinates: [139.7800295, 35.6476516]\r\n            //     }\r\n            //   },\r\n            //   {\r\n            //     type: \"Feature\",\r\n            //     properties: {\r\n            //       place: \"kyoto-tenryu_ramen\",\r\n            //       file: \"kyoto-tenryu_ramen\",\r\n            //       extension: \"jpg\"\r\n            //     },\r\n            //     geometry: {\r\n            //       type: \"Point\",\r\n            //       coordinates: [139.7820295, 35.6476516],\r\n            //       name: \"meepo\"\r\n            //     }\r\n            //   }\r\n            // ]\r\n          }\r\n        },\r\n        layout: {\r\n          \"icon-image\": \"gradient\"\r\n        }\r\n      });\r\n      // lonlat.forEach((ll, i) => {\r\n      //   console.log(ll);\r\n      //   const transform = transformFromLL(parseFloat(ll[0]), parseFloat(ll[1]));\r\n      //   const threeJSModel = threeDModel(transform, \"model\" + i);\r\n      //   map.addLayer(threeJSModel);\r\n      // });\r\n    });\r\n\r\n    map.on(\"click\", \"points\", function(e) {\r\n      map.flyTo({ center: e.coordinates, zoom: 25 });\r\n      console.log(e.features[0].properties.place);\r\n      // threeJSModel.sphere.material.color.setHex(0xffffff);\r\n      // console.log(threeJSModel.sphere.position);\r\n      const { place, file, extension } = e.features[0].properties;\r\n      console.log(place);\r\n      dispatch({ type: \"theater\", place, file, extension });\r\n      // document.getElementById(\"map\").style.display = \"none\";\r\n    });\r\n\r\n    return () => map.remove();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div\r\n          style={{ backgroundColor: \"red\", width: \"1080px\", height: \"1080px\" }}\r\n          id=\"theater\"\r\n          onClick={() => {\r\n            console.log(\"hello?\");\r\n            document.getElementById(\"map\").style.display = \"block\";\r\n          }}\r\n        ></div>\r\n        <div id=\"map\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { MapContext } from \"../Context\"\r\n\r\nconst ButtonOverlay = styled.div`\r\n  position: absolute;\r\n  background: red;\r\n  color: white;\r\n  width: 20rem;\r\n  left: 2rem;\r\n  top: 10rem;\r\n  text-align: center;\r\n  height: 4rem;\r\n  line-height: 4rem;\r\n  font-size: 28px;\r\n  font-family: sans-serif;\r\n  border: 6px white solid;\r\n  position: absolute;\r\n  background: red;\r\n  color: white;\r\n  width: 20rem;\r\n  cursor: pointer;\r\n`\r\n\r\nexport const ReturnToMap = () => {\r\n  const { dispatch } = useContext(MapContext)\r\n\r\n  return (\r\n    <ButtonOverlay onClick={() => dispatch({ type: \"map\" })}>\r\n      RETURN TO MAP\r\n    </ButtonOverlay>\r\n  )\r\n}\r\n","import React, { useEffect, useContext, Fragment } from \"react\";\r\nimport { MapContext } from \"../Context\";\r\nimport { ReturnToMap } from \"./ReturnToMap\";\r\nconst THREE = window.THREE;\r\nexport const Theater = () => {\r\n  const { state } = useContext(MapContext);\r\n  const { place, file, extension } = state;\r\n  useEffect(() => {\r\n    let camera, scene, renderer, controls, video;\r\n    let myReq;\r\n    init();\r\n    animate();\r\n    function init() {\r\n      let container, mesh;\r\n\r\n      container = document.getElementById(\"container\");\r\n\r\n      camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        window.innerWidth / window.innerHeight,\r\n        1,\r\n        1110\r\n      );\r\n      camera.position.z = 0.01;\r\n      //camera.target = new THREE.Vector3(0, 0, 0)\r\n\r\n      scene = new THREE.Scene();\r\n\r\n      const geo = new THREE.SphereBufferGeometry(500, 60, 40);\r\n      geo.scale(-1, 1, 1);\r\n\r\n      const baseURL = \"http://tokyo-360s.storage.googleapis.com\";\r\n      // const place = \"kyoto-kamo_river\";\r\n      // const file = \"kyoto-kamo_river-grandma_biker\";\r\n      // const extension = \"mp4\";\r\n      const gcpURL = `${baseURL}/${place}/${file}.${extension}`;\r\n\r\n      let texture;\r\n      if (extension === \"mp4\") {\r\n        video = document.createElement(\"video\");\r\n        video.id = \"vid\";\r\n        video.crossOrigin = \"anonymous\";\r\n        video.width = 2000;\r\n        video.height = 1000;\r\n        video.loop = true;\r\n        console.log(gcpURL);\r\n        video.src = gcpURL;\r\n        //        video.src = dog;\r\n        video.setAttribute(\"webkit-playsinline\", \"webkit-playsinline\");\r\n        video.play();\r\n        texture = new THREE.VideoTexture(video);\r\n        texture.minFilter = THREE.LinearFilter;\r\n        texture.magFilter = THREE.LinearFilter;\r\n        texture.format = THREE.RGBEFormat;\r\n        texture.mapping = THREE.SphericalReflectionMapping;\r\n      } else {\r\n        texture = new THREE.TextureLoader().load(gcpURL);\r\n      }\r\n\r\n      const material = new THREE.MeshBasicMaterial({ map: texture });\r\n\r\n      mesh = new THREE.Mesh(geo, material);\r\n\r\n      scene.add(mesh);\r\n\r\n      renderer = new THREE.WebGLRenderer();\r\n      renderer.setPixelRatio(window.devicePixelRatio);\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n      container.appendChild(renderer.domElement);\r\n    }\r\n\r\n    function animate() {\r\n      myReq = requestAnimationFrame(animate);\r\n      update();\r\n    }\r\n\r\n    function update() {\r\n      console.log(\"update\");\r\n      renderer.render(scene, camera);\r\n      controls.update();\r\n    }\r\n\r\n    return () => {\r\n      try {\r\n        video.src = \"\";\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n      window.cancelAnimationFrame(myReq);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <ReturnToMap />\r\n      <div id=\"container\" />\r\n    </Fragment>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\"\r\nimport { Map } from \"./components/Map\"\r\nimport { Theater } from \"./components/Theater\"\r\nimport { MapContext } from \"./Context\"\r\n\r\nexport const Router = () => {\r\n  const { state } = useContext(MapContext)\r\n  return (\r\n    <div>\r\n      {state.view === \"map\" && <Map />}\r\n      {state.view === \"theater\" && <Theater />}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { Router } from \"./Router\"\r\nimport { MapProvider } from \"./Context\"\r\n\r\nfunction App() {\r\n  return (\r\n    <MapProvider>\r\n      <Router />\r\n    </MapProvider>\r\n  )\r\n}\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { useReducer } from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport App from \"./App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}